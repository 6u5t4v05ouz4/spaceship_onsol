import{_ as w}from"./main-261ff586.js";import{c as k,C as h,P as u}from"./solana-26dfd0f2.js";import"./phaser-23102255.js";async function g(o,n={}){if(!o)return null;const d=n.network||"devnet",m=n.endpoint||k(d),l=new h(m);let f;try{f=new u(o)}catch(a){return console.warn("Invalid owner address",o,a),null}try{const a="@metaplex-foundation/js",e=await w(()=>import(a),[]);if(e&&e.Metaplex){const c=await e.Metaplex.make(l).nfts().findAllByOwner({owner:f});if(c&&c.length)for(const i of c)try{const t=i.json||(i.metadataTask?await i.metadataTask.run():null),s=t&&(t.image||t.image_url)?t.image||t.image_url:null;if(!s)continue;const p=b(s);if(p)return p}catch{continue}}}catch{console.warn("Metaplex not available, falling back to RPC method")}try{const a=await l.getParsedTokenAccountsByOwner(f,{programId:new u("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")});for(const{account:e}of a.value){const r=e.data&&e.data.parsed&&e.data.parsed.info;if(!r)continue;const c=r.tokenAmount||{};if(c.amount!=="1"||c.decimals!==0)continue;const i=r.mint;if(i)try{const t=await A(i),s=await l.getAccountInfo(t);if(!s||!s.data)continue}catch{continue}}}catch(a){console.warn("Fallback RPC method failed",a)}return null}function b(o){if(!o)return null;let n=o;return o.startsWith("ipfs://")&&(n=o.replace("ipfs://","https://ipfs.io/ipfs/")),!n.startsWith("http")&&n.includes("arweave.net")&&(n="https://"+n),n.startsWith("http://")&&(n=n.replace("http://","https://")),n.startsWith("https://")||n.includes("arweave.net")?n:null}async function A(o){const n=new u("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"),d=new u(o),[m]=await u.findProgramAddress([Buffer.from("metadata"),n.toBuffer(),d.toBuffer()],n);return m}async function y(o,n={}){if(!o)return null;const d=n.network||"devnet",m=n.endpoint||k(d),l=new h(m);let f;try{f=new u(o)}catch(a){return console.warn("Invalid owner address",o,a),null}try{const a="@metaplex-foundation/js",e=await w(()=>import(a),[]);if(e&&e.Metaplex){const c=await e.Metaplex.make(l).nfts().findAllByOwner({owner:f});if(c&&c.length)for(const i of c)try{const t=i.json||(i.metadataTask?await i.metadataTask.run():null);if(t&&t.attributes)return{name:t.name,description:t.description,image:t.image||t.image_url,attributes:t.attributes,mint:i.mintAddress.toString()}}catch{continue}}}catch{console.warn("Metaplex not available for metadata, falling back to RPC method")}try{const a=await l.getParsedTokenAccountsByOwner(f,{programId:new u("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")});for(const{account:e}of a.value){const r=e.data&&e.data.parsed&&e.data.parsed.info;if(!r)continue;const c=r.tokenAmount||{};if(c.amount!=="1"||c.decimals!==0)continue;const i=r.mint;if(i)try{const t=await A(i),s=await l.getAccountInfo(t);if(!s||!s.data)continue;console.log("Found NFT mint but metadata parsing not implemented in fallback")}catch{continue}}}catch(a){console.warn("Fallback RPC method failed for metadata",a)}return null}const v={findFirstNftImageForOwner:g,findFirstNftMetadataForOwner:y};export{v as default,g as findFirstNftImageForOwner,y as findFirstNftMetadataForOwner};
