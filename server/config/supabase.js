// =====================================================
// SPACE CRYPTO MINER - Supabase Configuration
// =====================================================

import { createClient } from '@supabase/supabase-js';

// Debug: verificar vari√°veis de ambiente
const supabaseUrl = process.env.SUPABASE_URL;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const anonKey = process.env.SUPABASE_ANON_KEY;

console.log('üîç Debug Supabase Config:');
console.log('  - SUPABASE_URL:', supabaseUrl ? '‚úÖ Definido' : '‚ùå N√ÉO DEFINIDO');
console.log('  - SERVICE_ROLE_KEY:', serviceRoleKey ? `‚úÖ Definido (${serviceRoleKey.substring(0, 20)}...)` : '‚ùå N√ÉO DEFINIDO');
console.log('  - ANON_KEY:', anonKey ? `‚úÖ Definido (${anonKey.substring(0, 20)}...)` : '‚ùå N√ÉO DEFINIDO');

// Tornar inicializa√ß√£o resiliente: n√£o falhar se vari√°veis estiverem ausentes
let supabaseAdmin = null;
let supabaseAnonClient = null;

try {
  if (supabaseUrl && serviceRoleKey) {
    supabaseAdmin = createClient(supabaseUrl, serviceRoleKey, {
      auth: { autoRefreshToken: false, persistSession: false }
    });
  } else {
    console.warn('‚ö†Ô∏è  Supabase admin client n√£o inicializado: vari√°veis ausentes');
  }
} catch (err) {
  console.warn('‚ö†Ô∏è  Falha ao inicializar supabaseAdmin:', err?.message || err);
  supabaseAdmin = null;
}

try {
  if (process.env.SUPABASE_URL && process.env.SUPABASE_ANON_KEY) {
    supabaseAnonClient = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);
  } else {
    console.warn('‚ö†Ô∏è  Supabase anon client n√£o inicializado: vari√°veis ausentes');
  }
} catch (err) {
  console.warn('‚ö†Ô∏è  Falha ao inicializar supabaseAnonClient:', err?.message || err);
  supabaseAnonClient = null;
}

// Validar conex√£o ao iniciar
export async function validateSupabaseConnection() {
  try {
    if (!supabaseAdmin) {
      console.warn('‚ö†Ô∏è  Supabase admin client indispon√≠vel; pulando valida√ß√£o');
      return false;
    }
    const { data, error } = await supabaseAdmin
      .from('player_state')
      .select('count')
      .limit(1);
    
    if (error && error.code !== 'PGRST116') { // PGRST116 = tabela n√£o existe ainda
      throw error;
    }
    
    console.log('‚úÖ Supabase connected successfully');
    return true;
  } catch (error) {
    console.error('‚ùå Supabase connection failed:', error.message);
    return false;
  }
}

export { supabaseAdmin, supabaseAnonClient };

