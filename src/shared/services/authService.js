/**
 * AuthService - Servi√ßo de Autentica√ß√£o com Supabase
 * Encapsula toda l√≥gica de autentica√ß√£o (email/OAuth, session, erros)
 */

import { createClient } from '@supabase/supabase-js';

// Vari√°veis de ambiente
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;
const REDIRECT_URL = import.meta.env.VITE_SUPABASE_REDIRECT_TO || 'http://localhost:3000/auth-callback';

// Validar configura√ß√£o
if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('‚ùå Supabase n√£o configurado. Verifique VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY');
}

// Criar cliente Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
  }
});

/**
 * Traduz mensagens de erro do Supabase para portugu√™s amig√°vel
 */
function translateError(error) {
  const message = error?.message || '';
  
  const translations = {
    'Invalid login credentials': 'Email ou senha incorretos. Verifique seus dados e tente novamente.',
    'Email not confirmed': 'Email ainda n√£o foi confirmado. Verifique seu inbox.',
    'User not found': 'Usu√°rio n√£o encontrado. Crie uma conta primeiro.',
    'Network error': 'Erro de conex√£o. Verifique sua internet e tente novamente.',
    'invalid_grant': 'Email ou senha incorretos.',
    'user_already_exists': 'Este email j√° est√° registrado.',
    'weak_password': 'Senha muito fraca. Use pelo menos 6 caracteres.',
  };

  // Procurar tradu√ß√£o correspondente
  for (const [key, value] of Object.entries(translations)) {
    if (message.toLowerCase().includes(key.toLowerCase())) {
      return value;
    }
  }

  // Fallback: usar mensagem original (resumida)
  return message || 'Erro ao processar solicita√ß√£o. Tente novamente.';
}

/**
 * Login com email e senha
 * @param {string} email - Email do usu√°rio
 * @param {string} password - Senha do usu√°rio
 * @returns {Promise<{user, session}>} - Dados do usu√°rio logado
 * @throws {Error} - Erro amig√°vel em portugu√™s
 */
export async function signIn(email, password) {
  try {
    console.log('üîê Tentando login com email/senha...');
    
    const { data, error } = await supabase.auth.signInWithPassword({
      email: email.trim(),
      password: password.trim(),
    });

    if (error) {
      console.error('‚ùå Erro Supabase:', error);
      throw new Error(translateError(error));
    }

    console.log('‚úÖ Login bem-sucedido!', data.user?.email);
    return data;
  } catch (error) {
    console.error('‚ùå Erro no login:', error.message);
    throw error;
  }
}

/**
 * Login com OAuth (Google, GitHub, etc)
 * @param {string} provider - Provedor OAuth ('google', 'github', etc)
 * @returns {Promise<{url}>} - URL de redirecionamento para OAuth
 * @throws {Error} - Erro amig√°vel em portugu√™s
 */
export async function signInWithOAuth(provider = 'google') {
  try {
    console.log(`üîê Iniciando OAuth com ${provider}...`);

    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: provider,
      options: {
        redirectTo: REDIRECT_URL,
        skipBrowserRedirect: false,
      }
    });

    if (error) {
      console.error('‚ùå Erro OAuth:', error);
      throw new Error(translateError(error));
    }

    console.log('‚úÖ OAuth iniciado. Redirecionando...');
    return data;
  } catch (error) {
    console.error('‚ùå Erro ao iniciar OAuth:', error.message);
    throw error;
  }
}

/**
 * Faz signup (registrar novo usu√°rio)
 * @param {string} email - Email do novo usu√°rio
 * @param {string} password - Senha do novo usu√°rio
 * @returns {Promise<{user, session}>} - Dados do novo usu√°rio
 * @throws {Error} - Erro amig√°vel em portugu√™s
 */
export async function signUp(email, password) {
  try {
    console.log('üìù Criando nova conta...');

    const { data, error } = await supabase.auth.signUp({
      email: email.trim(),
      password: password.trim(),
    });

    if (error) {
      console.error('‚ùå Erro ao criar conta:', error);
      throw new Error(translateError(error));
    }

    console.log('‚úÖ Conta criada! Verifique seu email para confirmar.');
    return data;
  } catch (error) {
    console.error('‚ùå Erro no signup:', error.message);
    throw error;
  }
}

/**
 * Obter sess√£o atual
 * @returns {Promise<session>} - Sess√£o do usu√°rio logado ou null
 */
export async function getSession() {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();

    if (error) {
      console.error('‚ùå Erro ao obter sess√£o:', error);
      return null;
    }

    if (session) {
      console.log('‚úÖ Sess√£o ativa:', session.user?.email);
    }
    return session;
  } catch (error) {
    console.error('‚ùå Erro no getSession:', error.message);
    return null;
  }
}

/**
 * Fazer logout
 * @returns {Promise<void>}
 * @throws {Error} - Erro ao fazer logout
 */
export async function signOut() {
  try {
    console.log('üö™ Fazendo logout...');

    const { error } = await supabase.auth.signOut();

    if (error) {
      console.error('‚ùå Erro ao fazer logout:', error);
      throw new Error(translateError(error));
    }

    console.log('‚úÖ Logout realizado com sucesso');
  } catch (error) {
    console.error('‚ùå Erro no logout:', error.message);
    throw error;
  }
}

/**
 * Atualizar/Refazer token de sess√£o
 * @returns {Promise<session>} - Nova sess√£o
 */
export async function refreshSession() {
  try {
    console.log('üîÑ Refazendo sess√£o...');

    const { data: { session }, error } = await supabase.auth.refreshSession();

    if (error) {
      console.error('‚ùå Erro ao refazer sess√£o:', error);
      return null;
    }

    console.log('‚úÖ Sess√£o atualizada');
    return session;
  } catch (error) {
    console.error('‚ùå Erro no refreshSession:', error.message);
    return null;
  }
}

/**
 * Obter usu√°rio atual
 * @returns {Promise<user>} - Usu√°rio logado ou null
 */
export async function getCurrentUser() {
  try {
    const session = await getSession();
    return session?.user || null;
  } catch (error) {
    console.error('‚ùå Erro ao obter usu√°rio:', error.message);
    return null;
  }
}

/**
 * Validar email
 * @param {string} email - Email a validar
 * @returns {boolean} - True se v√°lido
 */
export function isValidEmail(email) {
  const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
}

/**
 * Validar senha (m√≠nimo 6 caracteres)
 * @param {string} password - Senha a validar
 * @returns {boolean} - True se v√°lida
 */
export function isValidPassword(password) {
  return password && password.length >= 6;
}

// Exportar servi√ßo
export default {
  signIn,
  signInWithOAuth,
  signUp,
  signOut,
  getSession,
  refreshSession,
  getCurrentUser,
  isValidEmail,
  isValidPassword,
};
