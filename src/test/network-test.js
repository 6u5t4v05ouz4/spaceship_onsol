/**
 * Network Systems Test
 * Teste para validar os novos sistemas de rede multiplayer
 */

import socketService from '../services/socketService.js';

export default class NetworkTest {
  constructor(multiplayerManager) {
    this.multiplayerManager = multiplayerManager;
    this.testResults = [];
    this.testStartTime = Date.now();
    this.isRunning = false;
  }

  /**
   * Executa todos os testes dos sistemas de rede
   */
  async runAllTests() {
    console.log('üß™ Iniciando testes dos sistemas de rede...');
    this.isRunning = true;
    this.testResults = [];

    try {
      // Teste 1: Conex√£o e Autentica√ß√£o
      await this.testConnectionAndAuth();

      // Teste 2: Predi√ß√£o de Movimento
      await this.testMovementPrediction();

      // Teste 3: Interpola√ß√£o de Outros Jogadores
      await this.testPlayerInterpolation();

      // Teste 4: Rate Limiting e Valida√ß√£o
      await this.testRateLimiting();

      // Teste 5: Performance e Lat√™ncia
      await this.testPerformance();

      // Teste 6: Recupera√ß√£o de Erros
      await this.testErrorRecovery();

      this.showTestSummary();

    } catch (error) {
      console.error('‚ùå Erro durante os testes:', error);
      this.addTestResult('Test Suite', false, `Erro geral: ${error.message}`);
    } finally {
      this.isRunning = false;
    }
  }

  /**
   * Teste 1: Conex√£o e Autentica√ß√£o
   */
  async testConnectionAndAuth() {
    console.log('üîå Testando conex√£o e autentica√ß√£o...');

    try {
      // Verificar se est√° conectado
      const isConnected = socketService.isConnected();
      this.addTestResult('Conex√£o WebSocket', isConnected, 'Socket.io conectado');

      // Verificar se est√° autenticado
      const isAuthenticated = socketService.isAuthenticated();
      this.addTestResult('Autentica√ß√£o', isAuthenticated, 'JWT validado');

      // Verificar se tem player ID
      const playerId = socketService.getPlayerId();
      this.addTestResult('Player ID', !!playerId, `ID: ${playerId}`);

      // Verificar se tem estado do jogador
      const playerState = socketService.getPlayerState();
      this.addTestResult('Player State', !!playerState, 'Estado carregado');

      // Verificar estat√≠sticas de rede
      const networkStats = socketService.getNetworkStats();
      this.addTestResult('Network Stats', !!networkStats, 'Estat√≠sticas dispon√≠veis');

    } catch (error) {
      this.addTestResult('Conex√£o e Autentica√ß√£o', false, `Erro: ${error.message}`);
    }
  }

  /**
   * Teste 2: Predi√ß√£o de Movimento
   */
  async testMovementPrediction() {
    console.log('üéÆ Testando predi√ß√£o de movimento...');

    try {
      if (!socketService.isAuthenticated()) {
        this.addTestResult('Predi√ß√£o de Movimento', false, 'N√£o autenticado');
        return;
      }

      const initialPos = socketService.getPredictedPosition();
      this.addTestResult('Posi√ß√£o Inicial', !!initialPos, 'Posi√ß√£o obtida');

      // Simular movimento
      const testX = initialPos.x + 100;
      const testY = initialPos.y + 100;

      // Enviar movimento com predi√ß√£o
      const success = socketService.updatePosition(testX, testY);
      this.addTestResult('Envio com Predi√ß√£o', success, 'Movimento enviado');

      // Verificar se posi√ß√£o predita foi atualizada
      await this.delay(100); // Aguardar processamento
      const predictedPos = socketService.getPredictedPosition();
      const positionChanged = predictedPos.x !== initialPos.x || predictedPos.y !== initialPos.y;
      this.addTestResult('Posi√ß√£o Predita Atualizada', positionChanged, 'Predi√ß√£o funcionando');

    } catch (error) {
      this.addTestResult('Predi√ß√£o de Movimento', false, `Erro: ${error.message}`);
    }
  }

  /**
   * Teste 3: Interpola√ß√£o de Outros Jogadores
   */
  async testPlayerInterpolation() {
    console.log('üë• Testando interpola√ß√£o de outros jogadores...');

    try {
      // Criar jogador de teste
      const testPlayerId = 'test_player_123';
      const testPosition = { x: 500, y: 300 };

      // Adicionar jogador ao interpolation manager
      socketService.updateEntityPosition(testPlayerId, testPosition, 0, 100);
      this.addTestResult('Adicionar Entidade', true, 'Jogador de teste adicionado');

      // Obter posi√ß√£o interpolada
      const interpolatedPos = socketService.getInterpolatedPosition(testPlayerId);
      const positionValid = interpolatedPos && interpolatedPos.x === testPosition.x && interpolatedPos.y === testPosition.y;
      this.addTestResult('Posi√ß√£o Interpolada', positionValid, 'Interpola√ß√£o funcionando');

      // Simular movimento do jogador
      const newPosition = { x: 550, y: 350 };
      socketService.updateEntityPosition(testPlayerId, newPosition, 0, 100);
      this.addTestResult('Atualizar Posi√ß√£o', true, 'Posi√ß√£o atualizada');

      // Remover jogador de teste
      socketService.removeEntity(testPlayerId);
      this.addTestResult('Remover Entidade', true, 'Jogador removido');

    } catch (error) {
      this.addTestResult('Interpola√ß√£o de Jogadores', false, `Erro: ${error.message}`);
    }
  }

  /**
   * Teste 4: Rate Limiting e Valida√ß√£o
   */
  async testRateLimiting() {
    console.log('‚ö° Testando rate limiting e valida√ß√£o...');

    try {
      // Testar m√∫ltiplos movimentos r√°pidos
      let rapidMovements = 0;
      const maxRapidMovements = 35; // Acima do limite de 30/segundo

      for (let i = 0; i < maxRapidMovements; i++) {
        const x = 100 + i * 10;
        const y = 100 + i * 10;
        socketService.updatePosition(x, y);
        rapidMovements++;
        await this.delay(10); // 10ms entre movimentos
      }

      this.addTestResult('Rate Limiting Test', rapidMovements >= maxRapidMovements,
        `${rapidMovements} movimentos enviados`);

      // Aguardar poss√≠veis respostas de rate limit
      await this.delay(500);

    } catch (error) {
      this.addTestResult('Rate Limiting e Valida√ß√£o', false, `Erro: ${error.message}`);
    }
  }

  /**
   * Teste 5: Performance e Lat√™ncia
   */
  async testPerformance() {
    console.log('üìä Testando performance e lat√™ncia...');

    try {
      const startTime = Date.now();

      // Testar m√∫ltiplas atualiza√ß√µes de posi√ß√£o
      for (let i = 0; i < 10; i++) {
        const x = 200 + i * 20;
        const y = 200 + i * 20;
        socketService.updatePosition(x, y);
      }

      const updateTime = Date.now() - startTime;
      this.addTestResult('Performance Update', updateTime < 100,
        `10 atualiza√ß√µes em ${updateTime}ms`);

      // Verificar lat√™ncia estimada
      const stats = socketService.getNetworkStats();
      const latency = stats.connection.latency;
      const latencyGood = latency < 200; // Menos de 200ms √© bom
      this.addTestResult('Lat√™ncia', latencyGood, `Lat√™ncia estimada: ${latency}ms`);

      // Verificar uso de mem√≥ria
      const memoryUsage = stats.interpolation.memoryUsage;
      this.addTestResult('Uso de Mem√≥ria', !!memoryUsage, `Mem√≥ria: ${memoryUsage}`);

    } catch (error) {
      this.addTestResult('Performance e Lat√™ncia', false, `Erro: ${error.message}`);
    }
  }

  /**
   * Teste 6: Recupera√ß√£o de Erros
   */
  async testErrorRecovery() {
    console.log('üîß Testando recupera√ß√£o de erros...');

    try {
      // Testar movimento para posi√ß√£o inv√°lida
      const invalidX = NaN;
      const invalidY = undefined;

      // Isso n√£o deve quebrar o sistema
      try {
        socketService.updatePosition(invalidX, invalidY);
        this.addTestResult('Resili√™ncia a Dados Inv√°lidos', true, 'Sistema resistente a dados inv√°lidos');
      } catch (error) {
        this.addTestResult('Resili√™ncia a Dados Inv√°lidos', false, `Sistema quebrou: ${error.message}`);
      }

      // Testar reset dos sistemas
      socketService.resetNetworkSystems();
      this.addTestResult('Reset de Sistemas', true, 'Sistemas resetados com sucesso');

      // Verificar se ainda est√° conectado ap√≥s reset
      const stillConnected = socketService.isConnected();
      this.addTestResult('Estabilidade P√≥s-Reset', stillConnected, 'Conex√£o mantida ap√≥s reset');

    } catch (error) {
      this.addTestResult('Recupera√ß√£o de Erros', false, `Erro: ${error.message}`);
    }
  }

  /**
   * Adiciona resultado de teste
   */
  addTestResult(testName, passed, details) {
    this.testResults.push({
      name: testName,
      passed,
      details,
      timestamp: Date.now() - this.testStartTime
    });

    const status = passed ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${testName}: ${details}`);
  }

  /**
   * Mostra resumo dos testes
   */
  showTestSummary() {
    console.log('\nüìã === RESUMO DOS TESTES ===');

    const totalTests = this.testResults.length;
    const passedTests = this.testResults.filter(t => t.passed).length;
    const failedTests = totalTests - passedTests;

    console.log(`Total de Testes: ${totalTests}`);
    console.log(`Aprovados: ${passedTests} ‚úÖ`);
    console.log(`Falharam: ${failedTests} ‚ùå`);
    console.log(`Taxa de Sucesso: ${((passedTests / totalTests) * 100).toFixed(1)}%`);

    if (failedTests > 0) {
      console.log('\n‚ùå Testes Falhados:');
      this.testResults.filter(t => !t.passed).forEach(test => {
        console.log(`  - ${test.name}: ${test.details}`);
      });
    }

    console.log('\n‚è±Ô∏è Tempo Total:', `${((Date.now() - this.testStartTime) / 1000).toFixed(2)}s`);

    // Estat√≠sticas finais de rede
    const finalStats = socketService.getNetworkStats();
    console.log('\nüìä Estat√≠sticas Finais de Rede:');
    console.log(`  - Conectado: ${finalStats.connection.connected}`);
    console.log(`  - Autenticado: ${finalStats.connection.authenticated}`);
    console.log(`  - Lat√™ncia: ${finalStats.connection.latency}ms`);
    console.log(`  - Predi√ß√µes: ${finalStats.prediction.predictions}`);
    console.log(`  - Corre√ß√µes: ${finalStats.prediction.corrections}`);
    console.log(`  - Entidades: ${finalStats.interpolation.entities}`);
  }

  /**
   * Atraso para testes
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Verifica se os testes est√£o em execu√ß√£o
   */
  isTestRunning() {
    return this.isRunning;
  }

  /**
   * Obt√©m resultados dos testes
   */
  getTestResults() {
    return this.testResults;
  }

  /**
   * Teste r√°pido para desenvolvimento
   */
  async quickTest() {
    console.log('‚ö° Executando teste r√°pido...');

    try {
      const isConnected = socketService.isConnected();
      const isAuthenticated = socketService.isAuthenticated();
      const stats = socketService.getNetworkStats();

      console.log('‚úÖ Teste R√°pido:');
      console.log(`  - Conectado: ${isConnected}`);
      console.log(`  - Autenticado: ${isAuthenticated}`);
      console.log(`  - Lat√™ncia: ${stats.connection.latency}ms`);
      console.log(`  - Predi√ß√µes: ${stats.prediction.predictions}`);

      return isConnected && isAuthenticated;
    } catch (error) {
      console.error('‚ùå Erro no teste r√°pido:', error);
      return false;
    }
  }
}

/**
 * Como usar:
 *
 * No MultiplayerManager ou na cena do jogo:
 *
 * import NetworkTest from './test/network-test.js';
 *
 * // Criar inst√¢ncia
 * this.networkTest = new NetworkTest(this.multiplayerManager);
 *
 * // Executar testes completos
 * await this.networkTest.runAllTests();
 *
 * // Ou teste r√°pido
 * const passed = await this.networkTest.quickTest();
 *
 * // Verificar resultados
 * const results = this.networkTest.getTestResults();
 */